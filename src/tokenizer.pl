%% Author: James Walker
%% Copyrighted 2016 under the MIT license:
%%   http://www.opensource.org/licenses/mit-license.php
%%
%% Purpose: Tokenizes whitespace delimited ASCII strings from a file
%% E.g.,    tokenize_file('input.txt', TokenList).

% tokenize_file/2
% tokenize_file(+FileName, -TokenList)
% Takes in a filename, returns the file contents as a list of tokens
tokenize_file(FileName, TokenList) :-
  open(FileName, read, Stream),
  get_tokens(Stream, Tokens),
  !,
  close(Stream),
  remove_empty_tokens(Tokens, TokenList).

% get_tokens/2
% get_tokens(+Stream, -Tokens)
% Tokens are added to a list from an input stream
get_tokens(Stream, []) :-
  at_end_of_stream(Stream).
get_tokens(Stream, [Token|Tokens]) :-
  \+ at_end_of_stream(Stream),
  read_tokens(Stream, Token),
  get_tokens(Stream, Tokens).

% read_tokens/2
% read_tokens(+Stream, -Token).
% Reads characters from stream and unifies as a single token
read_tokens(Stream, Token) :-
  get0(Stream, Ascii),
  get_next_char(Stream, String, Ascii),
  atom_codes(Token, String).

% get_next_char/3
% get_next_char(+Stream, -String, +AsciiChar).
% Retrieves next character from the stream unless stopped
get_next_char(_, [],  9) :- !. % Stop if tab
get_next_char(_, [], 13) :- !. % Stop if carriage return
get_next_char(_, [], 10) :- !. % Stop if newline character
get_next_char(_, [], 32) :- !. % Stop if space  
get_next_char(_, [], -1) :- !. % Stop if end of the stream 
get_next_char(_, [], end_of_file) :- !. % Stop if end of file
get_next_char(Stream, [Char|String], Char) :-
  get0(Stream, AsciiChar),
  get_next_char(Stream, String, AsciiChar).

% remove_empty_tokens/2
% remove_empty_tokens(+RawTokenList, -CleanedTokenList).
% Removes empty string tokens that are generated by consecutive delimiters
remove_empty_tokens([], []).
remove_empty_tokens([Token|Tokens], TokenList) :-
  Token == '',
  remove_empty_tokens(Tokens, TokenList).
remove_empty_tokens([Token|Tokens], [Token|TokenList]) :-
  remove_empty_tokens(Tokens, TokenList).
